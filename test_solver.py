import unittest

from solver import run_board, run_operations


class SolverTestCase(unittest.TestCase):
    def test_run_board(self):
        self.assertEqual(
            run_board([2, 3, 7, 9, 10, 11], 106),
            [
                "9 ✖️ 11 🟰 99",
                "7 ➕ 99 🟰 106",
            ],
        )

        self.assertEqual(
            run_board([5, 11, 19, 20, 23, 25], 413),
            [
                "20 ➖ 11 🟰 9",
                "23 ➕ 25 🟰 48",
                "9 ✖️ 48 🟰 432",
                "432 ➖ 19 🟰 413",
            ],
        )

    def test_run_operations(self):
        result = [
            ([3, 4, 10, 25, 3], ["1 ➕ 2 🟰 3"]),
            ([3, 4, 10, 25, 2], ["1 ✖️ 2 🟰 2"]),
            ([3, 4, 10, 25, 1], ["2 ➖ 1 🟰 1"]),
            ([3, 4, 10, 25, 2], ["1 ➗ 2 🟰 2"]),
            ([2, 4, 10, 25, 4], ["1 ➕ 3 🟰 4"]),
            ([2, 4, 10, 25, 3], ["1 ✖️ 3 🟰 3"]),
            ([2, 4, 10, 25, 2], ["3 ➖ 1 🟰 2"]),
            ([2, 4, 10, 25, 3], ["1 ➗ 3 🟰 3"]),
            ([2, 3, 10, 25, 5], ["1 ➕ 4 🟰 5"]),
            ([2, 3, 10, 25, 4], ["1 ✖️ 4 🟰 4"]),
            ([2, 3, 10, 25, 3], ["4 ➖ 1 🟰 3"]),
            ([2, 3, 10, 25, 4], ["1 ➗ 4 🟰 4"]),
            ([2, 3, 4, 25, 11], ["1 ➕ 10 🟰 11"]),
            ([2, 3, 4, 25, 10], ["1 ✖️ 10 🟰 10"]),
            ([2, 3, 4, 25, 9], ["10 ➖ 1 🟰 9"]),
            ([2, 3, 4, 25, 10], ["1 ➗ 10 🟰 10"]),
            ([2, 3, 4, 10, 26], ["1 ➕ 25 🟰 26"]),
            ([2, 3, 4, 10, 25], ["1 ✖️ 25 🟰 25"]),
            ([2, 3, 4, 10, 24], ["25 ➖ 1 🟰 24"]),
            ([2, 3, 4, 10, 25], ["1 ➗ 25 🟰 25"]),
            ([1, 4, 10, 25, 5], ["2 ➕ 3 🟰 5"]),
            ([1, 4, 10, 25, 6], ["2 ✖️ 3 🟰 6"]),
            ([1, 4, 10, 25, 1], ["3 ➖ 2 🟰 1"]),
            ([1, 3, 10, 25, 6], ["2 ➕ 4 🟰 6"]),
            ([1, 3, 10, 25, 8], ["2 ✖️ 4 🟰 8"]),
            ([1, 3, 10, 25, 2], ["4 ➖ 2 🟰 2"]),
            ([1, 3, 10, 25, 2], ["2 ➗ 4 🟰 2"]),
            ([1, 3, 4, 25, 12], ["2 ➕ 10 🟰 12"]),
            ([1, 3, 4, 25, 20], ["2 ✖️ 10 🟰 20"]),
            ([1, 3, 4, 25, 8], ["10 ➖ 2 🟰 8"]),
            ([1, 3, 4, 25, 5], ["2 ➗ 10 🟰 5"]),
            ([1, 3, 4, 10, 27], ["2 ➕ 25 🟰 27"]),
            ([1, 3, 4, 10, 50], ["2 ✖️ 25 🟰 50"]),
            ([1, 3, 4, 10, 23], ["25 ➖ 2 🟰 23"]),
            ([1, 2, 10, 25, 7], ["3 ➕ 4 🟰 7"]),
            ([1, 2, 10, 25, 12], ["3 ✖️ 4 🟰 12"]),
            ([1, 2, 10, 25, 1], ["4 ➖ 3 🟰 1"]),
            ([1, 2, 4, 25, 13], ["3 ➕ 10 🟰 13"]),
            ([1, 2, 4, 25, 30], ["3 ✖️ 10 🟰 30"]),
            ([1, 2, 4, 25, 7], ["10 ➖ 3 🟰 7"]),
            ([1, 2, 4, 10, 28], ["3 ➕ 25 🟰 28"]),
            ([1, 2, 4, 10, 75], ["3 ✖️ 25 🟰 75"]),
            ([1, 2, 4, 10, 22], ["25 ➖ 3 🟰 22"]),
            ([1, 2, 3, 25, 14], ["4 ➕ 10 🟰 14"]),
            ([1, 2, 3, 25, 40], ["4 ✖️ 10 🟰 40"]),
            ([1, 2, 3, 25, 6], ["10 ➖ 4 🟰 6"]),
            ([1, 2, 3, 10, 29], ["4 ➕ 25 🟰 29"]),
            ([1, 2, 3, 10, 100], ["4 ✖️ 25 🟰 100"]),
            ([1, 2, 3, 10, 21], ["25 ➖ 4 🟰 21"]),
            ([1, 2, 3, 4, 35], ["10 ➕ 25 🟰 35"]),
            ([1, 2, 3, 4, 250], ["10 ✖️ 25 🟰 250"]),
            ([1, 2, 3, 4, 15], ["25 ➖ 10 🟰 15"]),
        ]
        self.assertEqual(run_operations([1, 2, 3, 4, 10, 25], []), result)
